% loads a model wit two mixture components and data generated by the "true" model,
% performs backward model selection
% plots model data fit
%
% TRUE MODEL 
% =======
% three experimental conditions, linked by a common censoring distriution
% condition 1: 1 subpopulation
% condition 2: 2 subpopulations
% condition 3: 2 subpopulations
%
% FULL MODEL 
% =======
% three experimental conditions, linked by a common censoring distriution
% condition 1: 2 subpopulation
% condition 2: 2 subpopulations
% condition 3: 2 subpopulations
%
% DATA
% =======
% Data is generated from given true paramters


clear all
close all




%% load model with maximum number of subpopulations for backward model selection

fprintf('\n')
disp('Loading model with max. number of subpopulations...');
%load Model
example_model_selection

% Process data for faster computations
D = processData(D);
printModel(M);
%% OPTIMIZATION
% Options
options_fit.n_starts = 15;
options_fit.plot = false;
options_fit.proposal = 'latin hypercube';
options_fit.fmincon = optimset('algorithm','interior-point',...%'active-set',...
                           'display','off',...
                           'GradObj','on',...
                           'MaxIter',4000,...
                           'MaxFunEvals',4000*parameters.number);
fprintf('\n')                       
disp('Find MLE for full model...');

% Run estimation
[parameters,M.fh.fit] = optimizeMultiStart(parameters,@(theta,opt) logLikelihoodMMc(theta,M,Mc,D,opt),options_fit);

% calculate information criterions
parameters= eval_performance(D,parameters);

% Print result of estimation
printModel(M,parameters);


%% plot model data fit

options.plot_subpop = 'true';
options.plot_type = 'cdf';
[M.fh.model_data] = plotMixtureModel(parameters,M,Mc,D,options);

%% MODEL SELECTION


% Options
options_modsel.criterion = 'BIC';
options_modsel.optim_opt.fmincon = optimset(options_fit.fmincon,'algorithm','active-set');

fprintf('\n')
disp('Perform model selection ...');
% Run model selection
[M_red,Mc_red,parameters_red,S,R] = performModelSelection(parameters,M,Mc,D,options_modsel);

% Print 
fprintf('\n')
fprintf('\n')
fprintf('\n')
disp('Full model:');
printModel(M,parameters)
fprintf('\n')
disp('Best reduced model:');
printModel(M_red,parameters_red)

[M.fh.model_data] = plotMixtureModel(parameters_red,M_red,Mc_red,D,options);
